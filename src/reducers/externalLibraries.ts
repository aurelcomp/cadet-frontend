import {
  ExternalLibraryName,
  ExternalLibraryNames
} from '../components/assessment/assessmentShape';

const runesLibrary = [
  'show',
  'color',
  'random_color',
  'red',
  'pink',
  'purple',
  'indigo',
  'blue',
  'green',
  'yellow',
  'orange',
  'brown',
  'black',
  'white',
  'scale_independent',
  'scale',
  'translate',
  'rotate',
  'stack_frac',
  'stack',
  'stackn',
  'quarter_turn_right',
  'quarter_turn_left',
  'turn_upside_down',
  'beside_frac',
  'beside',
  'flip_vert',
  'flip_horiz',
  'make_cross',
  'repeat_pattern',
  'square',
  'blank',
  'rcross',
  'sail',
  'corner',
  'nova',
  'circle',
  'heart',
  'pentagram',
  'ribbon',
  'anaglyph',
  'overlay_frac',
  'overlay',
  'hollusion' // currently not documented; animation not working
];

const curvesLibrary = [
  'make_point',
  'draw_points_on',
  'draw_connected',
  'draw_points_squeezed_to_window',
  'draw_connected_squeezed_to_window',
  'draw_connected_full_view',
  'draw_connected_full_view_proportional',
  'x_of',
  'y_of',
  'unit_line',
  'unit_line_at',
  'unit_circle',
  'connect_rigidly',
  'connect_ends',
  'put_in_standard_position',
  'translate',
  'scale',
  /** Contest functions */
  'rotate_pi_over_2',
  'scale_x_y',
  'gosperize',
  'gosper_curve',
  'show_connected_gosper',
  'repeated',
  'param_gosper',
  'param_gosperize',
  'rotate_around_origin',
  'arc', // used in GOSPERIZE
  'invert', // used in DRAGONIZE
  'alternative_unit_circle', // undocumented
  'full_view_proportional', // undocumented
  'squeeze_full_view', // undocumented
  'squeeze_rectangular_portion' // undocumented
];

const soundsLibrary = [
  'make_sound',
  'get_wave',
  'get_duration',
  'play',
  'stop',
  'consecutively',
  'simultaneously',
  'noise_sound',
  'sine_sound',
  'silence_sound',
  'letter_name_to_midi_note',
  'letter_name_to_frequency',
  'midi_note_to_frequency',
  'square_sound',
  'triangle_sound',
  'sawtooth_sound',
  'play_unsafe',
  /** Microphone Sounds */
  'init_record',
  'record',
  'record_for',
  /** Contest functions */
  'adsr',
  'stacking_adsr',
  'trombone',
  'piano',
  'bell',
  'violin',
  'cello'
];

const binaryTreesLibrary = [
  'make_empty_tree',
  'is_tree',
  'make_tree',
  'is_empty_tree',
  'entry',
  'left_branch',
  'right_branch'
];

const videoLibrary = [
  'red_of',
  'green_of',
  'blue_of',
  'set_rgb',
  'copy_pixel',
  'copy_image',
  'constrain_color',
  'compose_filter',
  'make_distortion_filter',
  'make_static_distortion_filter',
  'pixel_similar',
  'get_video_width',
  'get_video_height',
  'apply_filter',
  'reset_filter'
];

const faceAPILibrary = [
  'init_webcam',
  'face_matcher',
  'loadLabeledImages',
  'start',
  'create_canva',
  'load_models',
  'face_detection',
  'close_video',
  'load_faceapi',
  'faceapi_load_tinyFaceDetector',
  'faceapi_load_faceLandmark68Net',
  'faceapi_load_faceRecognitionNet',
  'faceapi_load_faceExpressionNet',
  'faceapi_load_ssdMobilenetv1',
  'startDetection',
  'media_addEventListener',
  'detect',
  'getImage',
  'train_recognition',
  'train',
  'trainLabeledImages',
  'encode_webcam_database',
  'video_detect_faces',
  'get_labels',
  'get_nonnull_labels',
  'change_label',
  'get_images',
  'encode_single_face',
  'store_embeddings',
  'get_embeddings',
  'get_canvas_video',
  'get_video_height',
  'get_video_width',
  'display_size',
  'match_dimensions',
  'set_interval',
  'add_event_video',
  'detect_all_faces_video',
  'resize_results',
  'resize_results',
  'get_descriptors',
  'find_best_match',
  'get_label_match',
  'get_distance_match',
  'draw_match',
  'get_context',
  'detection_done',
  'set_timeout',
  'do_after_detection',
  'draw_detections',
  'draw_landmarks',
  'draw_expressions',
  'array_push',
  'to_string',
  'get_boxes',
  'convert_to_img',
  'classify_images',
  'train_glasses_detection',
  'convert_to_image',
  'draw_custom_box',
  'fetch_image',
  'int_to_string',
  'detect_all_faces_video_worker',
  'delay'
];

const tensorflowLibrary = [
  'run',
  'fetch',
  'get_data',
  'array_push',
  'array_slice',
  'tf_tidy',
  'tf_concat',
  'tf_tensor2d',
  'tf_tensor1d',
  'tf_one_hot',
  'convertToTensor',
  'console_log',
  'convert_to_tensor',
  'train_model',
  'predict',
  'alertPrediction',
  'tf_sequential',
  'add_input_layer',
  'add_hidden_layer',
  'tf_shape',
  'compile',
  'tf_train',
  'model_fit',
  'get_proba',
  'get_highest_prediction',
  'tf_slice',
  'app',
  'load_mobilenet',
  'infer_mobilenet',
  'classify_mobilenet',
  'do_after_mobilenet',
  'create_knn',
  'predict_class',
  'add_example_knn',
  'do_after_knn'
];

/**
 * Defines which external libraries are available for usage, and what
 * external symbols (exposed functions) are under them.
 */

const libEntries: Array<[ExternalLibraryName, string[]]> = [
  [ExternalLibraryNames.NONE, []],
  [ExternalLibraryNames.RUNES, runesLibrary],
  [ExternalLibraryNames.CURVES, curvesLibrary],
  [ExternalLibraryNames.SOUNDS, soundsLibrary],
  [ExternalLibraryNames.BINARYTREES, binaryTreesLibrary],
  [ExternalLibraryNames.PIXNFLIX, videoLibrary],
  [ExternalLibraryNames.MACHINELEARNING, faceAPILibrary.concat(tensorflowLibrary)],
  [
    ExternalLibraryNames.ALL,
    runesLibrary.concat(curvesLibrary, soundsLibrary, binaryTreesLibrary, videoLibrary)
  ]
];

export const externalLibraries: Map<string, string[]> = new Map(libEntries);
